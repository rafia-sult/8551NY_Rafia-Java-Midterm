***ANSWER ALL OF THE QUESTIONS BELOW***

What is a programming language?
Answer: A programming language is a set of instructions given to the computer in order to perform an action. Computer
understand binary language -- its strings of 1s and 0s. Programming language allows us to translate our thoughts into
instructions (binary code) for the computer to understand.

What is a JDK composed of? Define each components?
Answer: JDK is composed of Java Development Kit (JDK), Java Run-time Environment (JRE), and Java Virtual Machine (JVM).
- JDK is a widely used software development environment package, that provides a base to all the application targeted to
build a java based application.
- JRE is part of JDK. JRE is a set of components to run java application.
- JVM loads, verifies and provides run-time environment(JRE) in which java bytecode can be executed.

What is an IDE?
Answer: IDE is an Integrated Development Environment for programming. IDE typically provide a code editor, a compiler
and a debugger that allows user to write and debug programs more easily. IDE also include language-specific

What are some of the most popular Java IDEs available in the market?
Answer: Some of the most popular Java IDEs available in the market are:
- Eclipse
- InteliJ IDEA
- Oracle JDeveloper
- BlueJ
- NetBeans
- GreenFoot
- MyEclipse

Explain the entire java life cycle.
Answer: The life cycle of java program starts when we type source code in a text editor that source code is converted
into machine code or bytecode (0's and 1's) is called java life cycle. There are various stages in the life cycle of
a java life cycle program.

1. Editor - program is created in an editor and stored in a disk in a file ending with .java.
2. Compiler - The input to the compiler is called java source code which is available in .java file. The output of the
compiler is machine independent code which is known as bytecode. After compiler created bytecode the code is then stored
in a .class file.
3. Loader - Class loader reads .class file containing the bytecode and then store them in memory.
4. Verifier - Bytecode verifier confirms all bytecode are valid.
5. Execution - The bytecode generated by the compiler is executed by Java Virtual Machine (JVM). Input to the JVM is
bytecode and output is machine code (0’s and 1’s) which will be executed by the CPU of the local machine.


What is a class?
Answer: A class is a blueprint of an object.

What is an object?
Answer:

What is the entry point of a Java project?
Answer: The main method is the entry point of a java project.

Why is the main() method static?
Answer: Java main() method is always static, so that compiler can call it without the creation of an object or before
the creation of an object.

Which class is the superclass of all classes?
Answer: The Object class, which is stored in the java.lang.Object

What is difference between path and classpath variables?
Answer: Both path and classpath variables are an environment variable. The main difference between path and classpath
is that path variable is set for java tools, which are used to compile code.
Classpath is used by the operating system or application to locate compiled java bytecodes stored
in classes and packages.

What is the difference between an Interface and Abstract class?
Answer: An abstract class permits you to make functionality that subclasses can implement or override whereas an
interface only permits you to state functionality but not to implement it. A class can extend only one abstract class
while a class can implement multiple interfaces.

Can you make an Object from an Interface and Abstract class? If yes or no, how would you do it?
Answer: No, we cannot create an object of an interface and abstract class. But we can create a reference variable of an
abstract class.

What is Access Modifier?
Answer:

What is OOP? Define each OOP concept.
Answer: OOP stands for object-oriented programming. OOP is a programming concept that works on the principle of
inheritance, encapsulation, abstraction and polymorphism.

- Inheritance lets programmers create new classes that share some of the attributes of existing classes.
- Encapsulation is data hiding. Encapsulation controls how others access data.
- Abstraction is a process which displays only the information needed and hides the unnecessary information. Like objects,
classes and variables represent more complex underlying code and data.
- Polymorphism allows us to perform the same action in many different ways. We use polymorphism for method overriding
(Run-time Polymorphism) and method overloading (Compile-time Polymorphism).

What is Java Package and which package is imported by default?
Answer: A java package is used to group related classes. Java imports java.lang package by default.

What is an API? List some API's that you have used so far.
Answer: API stands for Application Programming Interface. API is a set of functions that allows applications to access
data and interact with external software components and operating systems. Some of the API I have used so far are:
- Open API
- Partner API
- Private API

Does java support multiple inheritance? Why or why not?
Answer: Java does not support multiple inheritance because the problem with multiple inheritance is that
two classes may define different ways of doing the same thing, and the java compiler cannot choose which one to pick.

What is method overloading? List all of the different ways to overload.
Answer: Method Overloading allows a class to have more than one method having the same name, if their argument lists
are different. There are three ways to overload a method: Number of parameters, Data type of parameters and Order of
parameters.

Explain exceptions in java and how to handle them.
Answer: An exception is an event, which occurs during the execution of a program, that disrupts the normal flow of the
program's instructions.

What is static keyword? When and how do we use it?
Answer:

What is final keyword? When and how do we use it?
Answer:

Explain the difference between final, finally and finalize?
Answer:

What is a constructor?
Answer:

Can we have multiple constructors in a class?
Answer:

If we don't have a constructor declared, what is called during the object creation?
Answer:

What is "this" keyword in Java? When would we use it?
Answer:

What is "super" keyword in Java? What are some scenarios we would use it?
Answer:

What does JVM stand for?
Answer: JVM stand for Java Virtual Machine.

Is JVM platform independent?
Answer: Yes JVM is platform independent.

What version of Java are you using?
Answer: JDK 11

What does JAR stand for?
Answer: JAR stands for Java ARchive.

What is the difference between JDK and JVM?
Answer: JDK is a software development kit to develop applications in Java. JVM executes Java byte code and provides an
environment for executing it.

What is the difference between JVM and JRE?
Answer: JVM executes java byte code and JRE is an environment in order to execute any java program locally.

Explain the difference between compile-time and run-time?
Answer:

What is heap?
Answer:

How does Java manage its memory?
Answer:

What is the difference between String, StringBuffer and StringBuilder?
Answer:

What is Singleton class?
Answer:

What is Serialization and Deserialization?
Answer:

Explain the difference between While and Do..While loops?
Answer:

What is Enum?
Answer:

What is Iterator?
Answer:

Which one will take more memory: an int or Integer? Why?
Answer:

Why are Strings considered to be immutable in Java?
Answer:

What is constructor chaining in Java?
Answer:

The difference between Serial and Parallel Garbage Collector?
Answer:

What does JIT stands for?
Answer:

Explain the process of Java garbage collection?
Answer:

Can you guarantee the garbage collection process?
Answer:

What is the difference between stack and heap in Java?
Answer:

What is reflection in Java and why is it useful?
Answer:

What is multithreading in Java?
Answer:

What is synchronization in Java?
Answer:

What is a Framework?
Answer:

What are the testing Frameworks available in Java?
Answer:

What are jUnit and testNG?
Answer:

What are the dependencies for this project?
Answer:

What is dependency injection in Java?
Answer:

Explain what static binding and dynamic binding is?
Answer: